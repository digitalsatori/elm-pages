// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generate UI file 1`] = `
"port module Pages exposing (PathKey, allPages, allImages, internals, images, isValidRoute, pages, builtAt)

import Color exposing (Color)
import Pages.Internal
import Head
import Html exposing (Html)
import Json.Decode
import Json.Encode
import Pages.Platform
import Pages.Manifest exposing (DisplayMode, Orientation)
import Pages.Manifest.Category as Category exposing (Category)
import Url.Parser as Url exposing ((</>), s)
import Pages.ImagePath as ImagePath exposing (ImagePath)
import Pages.PagePath as PagePath exposing (PagePath)
import Pages.Directory as Directory exposing (Directory)
import Time


builtAt : Time.Posix
builtAt =
    Time.millisToPosix 1589734402000


type PathKey
    = PathKey


buildImage : List String -> ImagePath.Dimensions -> ImagePath PathKey
buildImage path dimensions =
    ImagePath.build PathKey (\\"images\\" :: path) dimensions


buildPage : List String -> PagePath PathKey
buildPage path =
    PagePath.build PathKey path


directoryWithIndex : List String -> Directory PathKey Directory.WithIndex
directoryWithIndex path =
    Directory.withIndex PathKey allPages path


directoryWithoutIndex : List String -> Directory PathKey Directory.WithoutIndex
directoryWithoutIndex path =
    Directory.withoutIndex PathKey allPages path


port toJsPort : Json.Encode.Value -> Cmd msg

port fromJsPort : (Json.Decode.Value -> msg) -> Sub msg


internals : Pages.Internal.Internal PathKey
internals =
    { applicationType = Pages.Internal.Browser
    , toJsPort = toJsPort
    , fromJsPort = fromJsPort identity
    , content = content
    , pathKey = PathKey
    }




allPages : List (PagePath PathKey)
allPages =
    [ 
    ]

pages =
    { directory = directoryWithoutIndex []
    }

images =
    { staticHttpError = (buildImage [ \\"static-http-error.png\\" ] { width = 919, height = 105 })
    , directory = directoryWithoutIndex []
    }


allImages : List (ImagePath PathKey)
allImages =
    [(buildImage [ \\"static-http-error.png\\" ] { width = 919, height = 105 })
    ]


isValidRoute : String -> Result String ()
isValidRoute route =
    let
        validRoutes =
            List.map PagePath.toString allPages
    in
    if
        (route |> String.startsWith \\"http://\\")
            || (route |> String.startsWith \\"https://\\")
            || (route |> String.startsWith \\"#\\")
            || (validRoutes |> List.member route)
    then
        Ok ()

    else
        (\\"Valid routes:\\\\n\\"
            ++ String.join \\"\\\\n\\\\n\\" validRoutes
        )
            |> Err


content : List ( List String, { extension: String, frontMatter : String, body : Maybe String } )
content =
    [ 
    ]
"
`;

exports[`generate template module connector 1`] = `
"module TemplateModulesBeta exposing (..)

import Browser
import Pages.Manifest as Manifest
import Shared
import TemplateType as M exposing (TemplateType)
import Head
import Html exposing (Html)
import Pages
import Pages.PagePath exposing (PagePath)
import Pages.Platform
import Pages.StaticHttp as StaticHttp
import Template.BlogIndex
import Template.BlogPost
import Template.Documentation
import Template.Page
import Template.Showcase


type alias Model =
    { global : Shared.Model
    , page : TemplateModel
    , current :
        Maybe
            { path :
                { path : PagePath Pages.PathKey
                , query : Maybe String
                , fragment : Maybe String
                }
            , metadata : TemplateType
            }
    }


type TemplateModel
    = ModelBlogIndex Template.BlogIndex.Model
    | ModelBlogPost Template.BlogPost.Model
    | ModelDocumentation Template.Documentation.Model
    | ModelPage Template.Page.Model
    | ModelShowcase Template.Showcase.Model

    | NotFound



type Msg
    = MsgGlobal Shared.Msg
    | OnPageChange
        { path : PagePath Pages.PathKey
        , query : Maybe String
        , fragment : Maybe String
        , metadata : TemplateType
        }
    | MsgBlogIndex Template.BlogIndex.Msg
    | MsgBlogPost Template.BlogPost.Msg
    | MsgDocumentation Template.Documentation.Msg
    | MsgPage Template.Page.Msg
    | MsgShowcase Template.Showcase.Msg



view :
    List ( PagePath Pages.PathKey, TemplateType )
    ->
        { path : PagePath Pages.PathKey
        , frontmatter : TemplateType
        }
    ->
        StaticHttp.Request
            { view : Model -> Shared.RenderedBody -> { title : String, body : Html Msg }
            , head : List (Head.Tag Pages.PathKey)
            }
view siteMetadata page =
    case page.frontmatter of
        M.BlogIndex metadata ->
            StaticHttp.map2
                (\\\\data globalData ->
                    { view =
                        \\\\model rendered ->
                            case model.page of
                                ModelBlogIndex subModel ->
                                    Template.BlogIndex.template.view
                                        subModel
                                        model.global
                                        siteMetadata
                                        { static = data
                                        , sharedStatic = globalData
                                        , metadata = metadata
                                        , path = page.path
                                        }
                                        rendered
                                        |> (\\\\{ title, body } ->
                                                Shared.template.view
                                                    globalData
                                                    page
                                                    model.global
                                                    MsgGlobal
                                                    ({ title = title, body = body }
                                                        |> Shared.template.map MsgBlogIndex
                                                    )
                                           )

                                _ ->
                                    { title = \\"\\", body = Html.text \\"\\" }
                    , head = Template.BlogIndex.template.head
                        { static = data
                        , sharedStatic = globalData
                        , metadata = metadata
                        , path = page.path
                        }
                    }
                )
                (Template.BlogIndex.template.staticData siteMetadata)
                (Shared.template.staticData siteMetadata)


        M.BlogPost metadata ->
            StaticHttp.map2
                (\\\\data globalData ->
                    { view =
                        \\\\model rendered ->
                            case model.page of
                                ModelBlogPost subModel ->
                                    Template.BlogPost.template.view
                                        subModel
                                        model.global
                                        siteMetadata
                                        { static = data
                                        , sharedStatic = globalData
                                        , metadata = metadata
                                        , path = page.path
                                        }
                                        rendered
                                        |> (\\\\{ title, body } ->
                                                Shared.template.view
                                                    globalData
                                                    page
                                                    model.global
                                                    MsgGlobal
                                                    ({ title = title, body = body }
                                                        |> Shared.template.map MsgBlogPost
                                                    )
                                           )

                                _ ->
                                    { title = \\"\\", body = Html.text \\"\\" }
                    , head = Template.BlogPost.template.head
                        { static = data
                        , sharedStatic = globalData
                        , metadata = metadata
                        , path = page.path
                        }
                    }
                )
                (Template.BlogPost.template.staticData siteMetadata)
                (Shared.template.staticData siteMetadata)


        M.Documentation metadata ->
            StaticHttp.map2
                (\\\\data globalData ->
                    { view =
                        \\\\model rendered ->
                            case model.page of
                                ModelDocumentation subModel ->
                                    Template.Documentation.template.view
                                        subModel
                                        model.global
                                        siteMetadata
                                        { static = data
                                        , sharedStatic = globalData
                                        , metadata = metadata
                                        , path = page.path
                                        }
                                        rendered
                                        |> (\\\\{ title, body } ->
                                                Shared.template.view
                                                    globalData
                                                    page
                                                    model.global
                                                    MsgGlobal
                                                    ({ title = title, body = body }
                                                        |> Shared.template.map MsgDocumentation
                                                    )
                                           )

                                _ ->
                                    { title = \\"\\", body = Html.text \\"\\" }
                    , head = Template.Documentation.template.head
                        { static = data
                        , sharedStatic = globalData
                        , metadata = metadata
                        , path = page.path
                        }
                    }
                )
                (Template.Documentation.template.staticData siteMetadata)
                (Shared.template.staticData siteMetadata)


        M.Page metadata ->
            StaticHttp.map2
                (\\\\data globalData ->
                    { view =
                        \\\\model rendered ->
                            case model.page of
                                ModelPage subModel ->
                                    Template.Page.template.view
                                        subModel
                                        model.global
                                        siteMetadata
                                        { static = data
                                        , sharedStatic = globalData
                                        , metadata = metadata
                                        , path = page.path
                                        }
                                        rendered
                                        |> (\\\\{ title, body } ->
                                                Shared.template.view
                                                    globalData
                                                    page
                                                    model.global
                                                    MsgGlobal
                                                    ({ title = title, body = body }
                                                        |> Shared.template.map MsgPage
                                                    )
                                           )

                                _ ->
                                    { title = \\"\\", body = Html.text \\"\\" }
                    , head = Template.Page.template.head
                        { static = data
                        , sharedStatic = globalData
                        , metadata = metadata
                        , path = page.path
                        }
                    }
                )
                (Template.Page.template.staticData siteMetadata)
                (Shared.template.staticData siteMetadata)


        M.Showcase metadata ->
            StaticHttp.map2
                (\\\\data globalData ->
                    { view =
                        \\\\model rendered ->
                            case model.page of
                                ModelShowcase subModel ->
                                    Template.Showcase.template.view
                                        subModel
                                        model.global
                                        siteMetadata
                                        { static = data
                                        , sharedStatic = globalData
                                        , metadata = metadata
                                        , path = page.path
                                        }
                                        rendered
                                        |> (\\\\{ title, body } ->
                                                Shared.template.view
                                                    globalData
                                                    page
                                                    model.global
                                                    MsgGlobal
                                                    ({ title = title, body = body }
                                                        |> Shared.template.map MsgShowcase
                                                    )
                                           )

                                _ ->
                                    { title = \\"\\", body = Html.text \\"\\" }
                    , head = Template.Showcase.template.head
                        { static = data
                        , sharedStatic = globalData
                        , metadata = metadata
                        , path = page.path
                        }
                    }
                )
                (Template.Showcase.template.staticData siteMetadata)
                (Shared.template.staticData siteMetadata)



init :
    Maybe Shared.Model
    ->
        Maybe
            { path :
                { path : PagePath Pages.PathKey
                , query : Maybe String
                , fragment : Maybe String
                }
            , metadata : TemplateType
            }
    -> ( Model, Cmd Msg )
init currentGlobalModel maybePagePath =
    let
        ( sharedModel, globalCmd ) =
            currentGlobalModel |> Maybe.map (\\\\m -> ( m, Cmd.none )) |> Maybe.withDefault (Shared.template.init maybePagePath)

        ( templateModel, templateCmd ) =
            case maybePagePath |> Maybe.map .metadata of
                Nothing ->
                    ( NotFound, Cmd.none )

                Just meta ->
                    case meta of
                        M.BlogIndex metadata ->
                            Template.BlogIndex.template.init metadata
                                |> Tuple.mapBoth ModelBlogIndex (Cmd.map MsgBlogIndex)


                        M.BlogPost metadata ->
                            Template.BlogPost.template.init metadata
                                |> Tuple.mapBoth ModelBlogPost (Cmd.map MsgBlogPost)


                        M.Documentation metadata ->
                            Template.Documentation.template.init metadata
                                |> Tuple.mapBoth ModelDocumentation (Cmd.map MsgDocumentation)


                        M.Page metadata ->
                            Template.Page.template.init metadata
                                |> Tuple.mapBoth ModelPage (Cmd.map MsgPage)


                        M.Showcase metadata ->
                            Template.Showcase.template.init metadata
                                |> Tuple.mapBoth ModelShowcase (Cmd.map MsgShowcase)


    in
    ( { global = sharedModel
      , page = templateModel
      , current = maybePagePath
      }
    , Cmd.batch
        [ templateCmd
        , globalCmd |> Cmd.map MsgGlobal
        ]
    )



update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        MsgGlobal msg_ ->
            let
                ( sharedModel, globalCmd ) =
                    Shared.template.update msg_ model.global
            in
            ( { model | global = sharedModel }
            , globalCmd |> Cmd.map MsgGlobal
            )

        OnPageChange record ->
            (init (Just model.global) <|
                Just
                    { path =
                        { path = record.path
                        , query = record.query
                        , fragment = record.fragment
                        }
                    , metadata = record.metadata
                    }
            )
                |> (\\\\( updatedModel, cmd ) ->
                        case Shared.template.onPageChange of
                            Nothing ->
                                ( updatedModel, cmd )

                            Just thingy ->
                                let
                                    ( updatedGlobalModel, globalCmd ) =
                                        Shared.template.update
                                            (thingy
                                                { path = record.path
                                                , query = record.query
                                                , fragment = record.fragment
                                                }
                                            )
                                            model.global
                                in
                                ( { updatedModel
                                    | global = updatedGlobalModel
                                  }
                                , Cmd.batch [ cmd, Cmd.map MsgGlobal globalCmd ]
                                )
                   )


        
        MsgBlogIndex msg_ ->
            let
                ( updatedPageModel, pageCmd, ( newGlobalModel, newGlobalCmd ) ) =
                    case ( model.page, model.current |> Maybe.map .metadata ) of
                        ( ModelBlogIndex pageModel, Just (M.BlogIndex metadata) ) ->
                            Template.BlogIndex.template.update
                                metadata
                                msg_
                                pageModel
                                model.global
                                |> mapBoth ModelBlogIndex (Cmd.map MsgBlogIndex)
                                |> (\\\\( a, b, c ) ->
                                        case c of
                                            Just sharedMsg ->
                                                ( a, b, Shared.template.update (Shared.SharedMsg sharedMsg) model.global )

                                            Nothing ->
                                                ( a, b, ( model.global, Cmd.none ) )
                                   )

                        _ ->
                            ( model.page, Cmd.none, ( model.global, Cmd.none ) )
            in
            ( { model | page = updatedPageModel, global = newGlobalModel }
            , Cmd.batch [ pageCmd, newGlobalCmd |> Cmd.map MsgGlobal ]
            )

        
        MsgBlogPost msg_ ->
            let
                ( updatedPageModel, pageCmd, ( newGlobalModel, newGlobalCmd ) ) =
                    case ( model.page, model.current |> Maybe.map .metadata ) of
                        ( ModelBlogPost pageModel, Just (M.BlogPost metadata) ) ->
                            Template.BlogPost.template.update
                                metadata
                                msg_
                                pageModel
                                model.global
                                |> mapBoth ModelBlogPost (Cmd.map MsgBlogPost)
                                |> (\\\\( a, b, c ) ->
                                        case c of
                                            Just sharedMsg ->
                                                ( a, b, Shared.template.update (Shared.SharedMsg sharedMsg) model.global )

                                            Nothing ->
                                                ( a, b, ( model.global, Cmd.none ) )
                                   )

                        _ ->
                            ( model.page, Cmd.none, ( model.global, Cmd.none ) )
            in
            ( { model | page = updatedPageModel, global = newGlobalModel }
            , Cmd.batch [ pageCmd, newGlobalCmd |> Cmd.map MsgGlobal ]
            )

        
        MsgDocumentation msg_ ->
            let
                ( updatedPageModel, pageCmd, ( newGlobalModel, newGlobalCmd ) ) =
                    case ( model.page, model.current |> Maybe.map .metadata ) of
                        ( ModelDocumentation pageModel, Just (M.Documentation metadata) ) ->
                            Template.Documentation.template.update
                                metadata
                                msg_
                                pageModel
                                model.global
                                |> mapBoth ModelDocumentation (Cmd.map MsgDocumentation)
                                |> (\\\\( a, b, c ) ->
                                        case c of
                                            Just sharedMsg ->
                                                ( a, b, Shared.template.update (Shared.SharedMsg sharedMsg) model.global )

                                            Nothing ->
                                                ( a, b, ( model.global, Cmd.none ) )
                                   )

                        _ ->
                            ( model.page, Cmd.none, ( model.global, Cmd.none ) )
            in
            ( { model | page = updatedPageModel, global = newGlobalModel }
            , Cmd.batch [ pageCmd, newGlobalCmd |> Cmd.map MsgGlobal ]
            )

        
        MsgPage msg_ ->
            let
                ( updatedPageModel, pageCmd, ( newGlobalModel, newGlobalCmd ) ) =
                    case ( model.page, model.current |> Maybe.map .metadata ) of
                        ( ModelPage pageModel, Just (M.Page metadata) ) ->
                            Template.Page.template.update
                                metadata
                                msg_
                                pageModel
                                model.global
                                |> mapBoth ModelPage (Cmd.map MsgPage)
                                |> (\\\\( a, b, c ) ->
                                        case c of
                                            Just sharedMsg ->
                                                ( a, b, Shared.template.update (Shared.SharedMsg sharedMsg) model.global )

                                            Nothing ->
                                                ( a, b, ( model.global, Cmd.none ) )
                                   )

                        _ ->
                            ( model.page, Cmd.none, ( model.global, Cmd.none ) )
            in
            ( { model | page = updatedPageModel, global = newGlobalModel }
            , Cmd.batch [ pageCmd, newGlobalCmd |> Cmd.map MsgGlobal ]
            )

        
        MsgShowcase msg_ ->
            let
                ( updatedPageModel, pageCmd, ( newGlobalModel, newGlobalCmd ) ) =
                    case ( model.page, model.current |> Maybe.map .metadata ) of
                        ( ModelShowcase pageModel, Just (M.Showcase metadata) ) ->
                            Template.Showcase.template.update
                                metadata
                                msg_
                                pageModel
                                model.global
                                |> mapBoth ModelShowcase (Cmd.map MsgShowcase)
                                |> (\\\\( a, b, c ) ->
                                        case c of
                                            Just sharedMsg ->
                                                ( a, b, Shared.template.update (Shared.SharedMsg sharedMsg) model.global )

                                            Nothing ->
                                                ( a, b, ( model.global, Cmd.none ) )
                                   )

                        _ ->
                            ( model.page, Cmd.none, ( model.global, Cmd.none ) )
            in
            ( { model | page = updatedPageModel, global = newGlobalModel }
            , Cmd.batch [ pageCmd, newGlobalCmd |> Cmd.map MsgGlobal ]
            )



type alias SiteConfig =
    { canonicalUrl : String
    , manifest : Manifest.Config Pages.PathKey
    }

templateSubscriptions : TemplateType -> PagePath Pages.PathKey -> Model -> Sub Msg
templateSubscriptions metadata path model =
    case model.page of
        
        ModelBlogIndex templateModel ->
            case metadata of
                M.BlogIndex templateMetadata ->
                    Template.BlogIndex.template.subscriptions
                        templateMetadata
                        path
                        templateModel
                        model.global
                        |> Sub.map MsgBlogIndex

                _ ->
                    Sub.none

        
        ModelBlogPost templateModel ->
            case metadata of
                M.BlogPost templateMetadata ->
                    Template.BlogPost.template.subscriptions
                        templateMetadata
                        path
                        templateModel
                        model.global
                        |> Sub.map MsgBlogPost

                _ ->
                    Sub.none

        
        ModelDocumentation templateModel ->
            case metadata of
                M.Documentation templateMetadata ->
                    Template.Documentation.template.subscriptions
                        templateMetadata
                        path
                        templateModel
                        model.global
                        |> Sub.map MsgDocumentation

                _ ->
                    Sub.none

        
        ModelPage templateModel ->
            case metadata of
                M.Page templateMetadata ->
                    Template.Page.template.subscriptions
                        templateMetadata
                        path
                        templateModel
                        model.global
                        |> Sub.map MsgPage

                _ ->
                    Sub.none

        
        ModelShowcase templateModel ->
            case metadata of
                M.Showcase templateMetadata ->
                    Template.Showcase.template.subscriptions
                        templateMetadata
                        path
                        templateModel
                        model.global
                        |> Sub.map MsgShowcase

                _ ->
                    Sub.none



        NotFound ->
            Sub.none


mainTemplate { documents, site } =
    Pages.Platform.init
        { init = init Nothing
        , view = view
        , update = update
        , subscriptions =
            \\\\metadata path model ->
                Sub.batch
                    [ Shared.template.subscriptions metadata path model.global |> Sub.map MsgGlobal
                    , templateSubscriptions metadata path model
                    ]
        , documents = documents
        , onPageChange = Just OnPageChange
        , manifest = site.manifest
        , canonicalSiteUrl = site.canonicalUrl
        , internals = Pages.internals
        }



mapDocument : Browser.Document Never -> Browser.Document mapped
mapDocument document =
    { title = document.title
    , body = document.body |> List.map (Html.map never)
    }


mapBoth fnA fnB ( a, b, c ) =
    ( fnA a, fnB b, c )
"
`;
